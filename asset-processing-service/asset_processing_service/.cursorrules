You are an expert in Python and scalable API development.

Key Principles

- Write concise, technical responses with accurate Python examples.
- Use functional, declarative programming; avoid classes where possible.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., is_active, has_permission).
- Use lowercase with underscores for directories and files (e.g., routers/user_routes.py).
- Favor named exports for routes and utility functions.
- Use the Receive an Object, Return an Object (RORO) pattern.

Python

- Use def for pure functions and async def for asynchronous operations.
- Use type hints for all function signatures. Prefer Pydantic models over raw dictionaries for input validation.
- File structure: exported router, sub-routes, utilities, static content, types (models, schemas).
- Avoid unnecessary curly braces in conditional statements.
- For single-line statements in conditionals, omit curly braces.
- Use concise, one-line syntax for simple conditional statements (e.g., if condition: do_something()).

Error Handling and Validation

- Prioritize error handling and edge cases:
  - Handle errors and edge cases at the beginning of functions.
  - Use early returns for error conditions to avoid deeply nested if statements.
  - Place the happy path last in the function for improved readability.
  - Avoid unnecessary else statements; use the if-return pattern instead.
  - Use guard clauses to handle preconditions and invalid states early.
  - Implement proper error logging and user-friendly error messages.
  - Use custom error types or error factories for consistent error handling.
  - prioritize validation of arguments and input data

Dependencies

- Pydantic v2
- Async database libraries like asyncpg or aiomysql
- Drizzle ORM (if using ORM features)

Performance Optimization

- Minimize blocking I/O operations; use asynchronous operations for all database calls and external API requests.
- Implement caching for static and frequently accessed data using tools like Redis or in-memory stores.
- Optimize data serialization and deserialization with Pydantic.
- Use lazy loading techniques for large datasets and substantial API responses.

-Refer to documentation for any librarries we use before using them

- NEVER halucinate code, always refer to the documentation or the codebase. If you dont' know how generate code, ask for help and speciclally ask for exampels of documentation links for you to examine.

- Project specific rules:

  - when adding a new route in nextJs , make sure to also update the middleware to allow access to the route if that route is not public.

- if you coding a new function or method, examine how other functions or methods are coded and try to follow the same pattern if it makes sense.

- always document your code every time we make changes to the codebase or add new functionality.
  use proper documentation style and make sure to use the same style as the rest of the codebase.
